{"version":3,"sources":["../../app-es6/dao/negociacaoDAO.js"],"names":["Negociacao","NegociacaoDAO","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","data","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEIC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;0DAEqBC,U,EAAY;AAAA;;AAE9B,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChC;AACA,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB;AAEd;AAFc,6BAGTO,WAHS,CAGG,MAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMII,oCAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,6BAFD;AAGAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAIX,yBAfM,CAAP;AAgBH;;;0DAEqB;AAAA;;AAElB,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT;AAGb;AAHa,6BAIRiB,UAJQ,EAAb;;AAMA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;AACpB,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,oCAAGD,KAAH,EAAU;AACN,wCAAIE,OAAOF,MAAMG,KAAjB;AACAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACAP,0CAAMQ,QAAN;AACH,iCAJD,MAIO;AACJxB,4CAAQe,WAAR;AACF;AACJ,6BAVD;AAWAF,mCAAON,OAAP,GAAiB,aAAK;AAClBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAAT,CAAea,IAA3B;AACAxB,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBAxBM,CAAP;AAyBH;;;4DAEuB;AAAA;;AAEpB,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR;AAGV;AAHU,6BAIT6B,KAJS,EAAd;;AAMAxB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,mCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AAAkD,6BAFtD;AAGH,yBAZM,CAAP;AAaH","file":"negociacaoDAO.js","sourcesContent":["import { Negociacao } from '../models/negociacao';\r\n\r\nexport class NegociacaoDAO {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes'\r\n    }\r\n\r\n    adicionaNegociacaoDAO(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n                //MUITO CUIDADO COM EVENTOS ASSÍNCRONOS EM SEU BANCO, POIS MUITAS VEZES PARTES FUNDAMENTAIS DE SEU CÓDIGO PODEM NÃO TER SIDO CHAMADAS\r\n                let request = this._connection\r\n                    .transaction([this._store], 'readwrite')\r\n                //Através da store podemos utilizar a persistencia de dados\r\n                    .objectStore(this._store)\r\n                    .add(negociacao);\r\n    \r\n                    request.onsuccess = e => {\r\n                        resolve();\r\n                    };\r\n                    request.onerror = e => {\r\n                        console.log(e.target.error);\r\n                        reject('Não foi possível adicionar a negociação');\r\n                    }\r\n        });\r\n    }\r\n\r\n    listaNegociacoesDAO() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n            //Criamos um cursor para poder navegar em nossa store\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n                let atual = e.target.result;\r\n\r\n                if(atual) {\r\n                    let data = atual.value;\r\n                    negociacoes.push(new Negociacao(data._data, data._quantidade, data._valor));\r\n                    atual.continue();\r\n                } else {\r\n                   resolve(negociacoes)\r\n                }\r\n            };\r\n            cursor.onerror = e => {\r\n                console.log(e.target.error.name);\r\n                reject('Não foi possível listar as negociações')\r\n            };\r\n        })\r\n    }\r\n\r\n    apagaTodasNegociacoes() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                //Criamos um cursor para poder navegar em nossa store\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações apagadas com sucesso!');\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível remover as negociações')};\r\n        })\r\n    }\r\n}"]}