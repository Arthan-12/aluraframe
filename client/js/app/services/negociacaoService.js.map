{"version":3,"sources":["../../app-es6/services/negociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDAO","Negociacao","NegociacaoService","_http","Promise","resolve","reject","getNegociacoes","then","negociacoes","map","Date","obj","data","quantidade","valor","catch","console","log","err","negociacao","getConnection","connection","dao","adicionaNegociacaoDAO","Error","listaNegociacoesDAO","apagaTodasNegociacoes","listaAtual","importaNegociacoesDaSemana","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"negociacaoService.js","sourcesContent":["import { HttpService } from './httpService';\r\nimport { ConnectionFactory }  from './connectionFactory';\r\nimport { NegociacaoDAO } from '../dao/negociacaoDAO';\r\nimport { Negociacao } from '../models/negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    importaNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .getNegociacoes('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                        //mapear esses objetos em instancias de Negociacao, passando seus atributos.\r\n                        .map(obj =>\r\n                            new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)))\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Não foi possível obter as negociações da semana')\r\n                })\r\n        });\r\n    }\r\n\r\n    importaNegociacoesDaSemanaAnterior() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .getNegociacoes('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                        //mapear esses objetos em instancias de Negociacao, passando seus atributos.\r\n                        .map(obj =>\r\n                            new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)))\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Não foi possível obter as negociações da semana')\r\n                })\r\n        });\r\n        \r\n    }\r\n\r\n    importaNegociacoesDaSemanaRetrasada() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .getNegociacoes('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                        //mapear esses objetos em instancias de Negociacao, passando seus atributos.\r\n                        .map(obj =>\r\n                            new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)))\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Não foi possível obter as negociações da semana')\r\n                })\r\n        });\r\n        \r\n    }\r\n\r\n    cadastraNegociacao(negociacao) {\r\n\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection =>\r\n            //Uma vez que conseguimos a conexão, instanciamos o DAO para gravar no db\r\n            new NegociacaoDAO(connection))\r\n                .then(dao => dao.adicionaNegociacaoDAO(negociacao))\r\n                .then(() => 'Negociação adicionada com sucesso!')\r\n                .catch(err => {\r\n                    console.log(err)\r\n                    throw new Error('Não foi possível adicionar a negociação')\r\n                });\r\n    }\r\n\r\n    listaNegociacoes() {\r\n\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection =>\r\n            new NegociacaoDAO(connection))\r\n                .then(dao => dao.listaNegociacoesDAO())\r\n                .catch(err => {\r\n                    console.log(err)\r\n                    throw new Error('Não foi possível obter as negociações')\r\n                });\r\n    }\r\n\r\n    apagaNegociacao() {\r\n\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection =>\r\n            new NegociacaoDAO(connection))\r\n                .then(dao => dao.apagaTodasNegociacoes())\r\n                .then(() => 'Negociacoes apagadas com sucesso!')\r\n                .catch(err => {\r\n                    console.log(err)\r\n                    throw new Error('Não foi possível apagar as negociações')\r\n                });\r\n    }\r\n\r\n    importaNegociacao(listaAtual) {\r\n        \r\n        return this.importaNegociacoesDaSemana()\r\n        .then(negociacoes => negociacoes\r\n            .filter(negociacao =>\r\n                !listaAtual\r\n                    .some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n                        )\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                            throw new Error('Não foi possível buscar negociações para importar')\r\n                        })\r\n    }\r\n}\r\n"]}