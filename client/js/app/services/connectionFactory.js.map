{"version":3,"sources":["../../app-es6/services/connectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACcA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAEHC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B;AACA;AACA,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAJD;AAKH;AACDE,wCAAQL,UAAR;AACH,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAzBM,CAAP;AA0BH;;;iDAEmBtB,U,EAAY;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC5C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBAND;AAOH;;;sDAEwB;AACrB,4BAAG7B,UAAH,EAAe;AACX;AACAC;AACA;AACAD,yCAAa,IAAb;AACH;AACJ","file":"connectionFactory.js","sourcesContent":["\r\n        const stores = ['negociacoes'];\r\n        const version = 5;\r\n        const dbName = 'aluraframe';\r\n        \r\n        let connection = null;\r\n        let close = null;\r\n\r\n    export class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStore(e.target.result);\r\n                }\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            //Para impedir que a conexão seja fechada externamente, realizamos um Monkey Patching, onde reescrevemos o método close() e criamos o\r\n                            // closeConnection dentro da classe;\r\n                            throw new Error('Você não pode fechar diretamentre a conexão')\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                }\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                }\r\n            })\r\n        }\r\n\r\n        static _createStore(connection) {\r\n            stores.forEach(store => {\r\n\r\n                if(connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                connection.createObjectStore(store, {autoIncrement: true})\r\n            })\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection) {\r\n                //Além da abordagem bind() para manter o escopo em connection e não em 'this', seria possível utilizar o código comentado abaixo\r\n                close();\r\n                //Reflect.apply(close, connection, []);\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n"]}