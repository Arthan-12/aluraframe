{"version":3,"sources":["../../app-es6/controllers/negociacaoController.js"],"names":["ListaNegociacoes","Mensagem","Negociacao","NegociacoesView","MensagemView","NegociacaoService","DateHelper","Bind","NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_ordemAtual","_listaNegociacoes","_mensagem","_negociacaoService","_init","listaNegociacoes","then","negociacoes","forEach","adicionaNegociacao","negociacao","catch","texto","err","event","preventDefault","_criaNegociacao","cadastraNegociacao","mensagem","_limpaFormulario","negociacaoService","Promise","all","importaNegociacoesDaSemana","importaNegociacoesDaSemanaAnterior","importaNegociacoesDaSemanaRetrasada","filter","some","JSON","stringify","negociacaoExistente","reduce","newArray","array","concat","apagaNegociacao","esvaziaLista","erro","textoParaData","value","parseInt","parseFloat","focus","coluna","ordenaColuna","a","b","negociacaoController","currentInstance"],"mappings":"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","file":"negociacaoController.js","sourcesContent":["import { ListaNegociacoes } from '../models/listaNegociacoes';\r\nimport { Mensagem } from '../models/mensagem';\r\nimport { Negociacao } from '../models/negociacao';\r\nimport { NegociacoesView } from '../views/negociacoesView';\r\nimport { MensagemView } from '../views/mensagemView';\r\nimport { NegociacaoService } from '../services/negociacaoService';\r\nimport { DateHelper } from '../helpers/dateHelper';\r\nimport { Bind } from '../helpers/bind';\r\n\r\n\r\nclass NegociacaoController {\r\n\r\n    constructor() {\r\n        //A função bind() mantém o escopo de querySelector ao document. Sem ela, ele atrela o método ao $ e perde o efeito de 'this'\r\n        let $ = document.querySelector.bind(document);\r\n\r\n        this._inputData = $('#data');\r\n        this._inputQuantidade = $('#quantidade');\r\n        this._inputValor = $('#valor');\r\n        this._ordemAtual = '';\r\n        //Para poder reutilizar a função de update na listaNegociacoes e ela nao ficar presa ao escopo 'this', passamos a instancia com dois parametros, como exemplificado abaixo\r\n\r\n        this._listaNegociacoes = new Bind(\r\n            //model\r\n            new ListaNegociacoes(),\r\n            //view\r\n            new NegociacoesView($('#negociacoesView')),\r\n            //condição (com REST operator no Bind() torna desnecessario o uso do array)\r\n            'adicionaNegociacao', 'esvaziaLista', 'ordenaColuna', 'inverteOrdem')\r\n        //Se utilizarmos a abordagem de arrow function, o código irá funcionar tambem, pelo fato do escopo dela ser léxico, amarrado ao contexto, diferente da function, que é dinamico\r\n         \r\n        this._mensagem = new Bind(\r\n            new Mensagem(),\r\n            new MensagemView($('#mensagemView')),\r\n            'texto');\r\n        \r\n        this._ordemAtual = '';\r\n\r\n        this._negociacaoService = new NegociacaoService();\r\n\r\n        this._init();\r\n    }\r\n\r\n    _init() {\r\n\r\n        this._negociacaoService\r\n            .listaNegociacoes()\r\n            .then(negociacoes => negociacoes\r\n                .forEach(negociacao =>\r\n                    this._listaNegociacoes.adicionaNegociacao(negociacao)))\r\n                .catch(err => \r\n                    this._mensagem.texto = err\r\n                );\r\n    }\r\n\r\n    //Método de integração entre a DAO e a Controller\r\n    adicionaNegociacao(event) {\r\n        //preventDefault é utilizado para não recarregar o formulário\r\n        event.preventDefault();\r\n       \r\n        let negociacao = this._criaNegociacao();\r\n\r\n        this._negociacaoService\r\n            .cadastraNegociacao(negociacao)\r\n            .then(mensagem => {\r\n                this._listaNegociacoes.adicionaNegociacao(negociacao);\r\n                this._mensagem.texto = mensagem;\r\n                this._limpaFormulario();\r\n            })\r\n            .catch(err => this._mensagem.texto = err)\r\n    }\r\n\r\n    importaTodasNegociacoes() {\r\n        let negociacaoService = new NegociacaoService();\r\n\r\n        Promise.all([\r\n            negociacaoService.importaNegociacoesDaSemana(),\r\n            negociacaoService.importaNegociacoesDaSemanaAnterior(),\r\n            negociacaoService.importaNegociacoesDaSemanaRetrasada()])\r\n            //O método filter vai varrer o array de negociacoes inteiro usando o parametro definido pelo usuário e filtrar os elementos que atendem a ele, num novo array\r\n            .then(negociacoes => negociacoes\r\n                .filter(negociacao =>\r\n                !this._listaNegociacoes.negociacoes\r\n                //O método some vai varrer o array em busca do elemento definido no parametro, no caso a string de uma negociacao existente (nao compare elementos diretamente em js!)\r\n                //e realizar o break assim que encontrar o elemento que atender a exigencia\r\n                .some(negociacaoExistente =>\r\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n                    )\r\n                .then(negociacoes => {\r\n                //Precisamos converter a lista de arrays que as negociações retornam, para uma única lista, usando reduce, para importarmos corretamente nossas negociações\r\n                negociacoes\r\n                    .reduce((newArray, array) => newArray.concat(array), [])\r\n                    //Vamos adicionar cada instancia gerada em nossa lista de negociacoes\r\n                    .forEach(negociacao => this._listaNegociacoes.adicionaNegociacao(negociacao));\r\n                    this._mensagem.texto = 'Negociações importadas com sucesso';\r\n\r\n            })\r\n            .catch(err => this._mensagem.texto = err);\r\n    }\r\n\r\n    importaNegociacoes() {\r\n\r\n        this._negociacaoService\r\n            .importaNegociacoesDaSemana(this._listaNegociacoes)\r\n            .then(negociacoes => {\r\n                negociacoes.filter(negociacao =>\r\n                    !this._listaNegociacoes.negociacoes\r\n                    .some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n                    .forEach(negociacao =>\r\n                        this._listaNegociacoes.adicionaNegociacao(negociacao));\r\n                        this._mensagem.texto = 'Negociações importadas com sucesso';\r\n                    })\r\n                    .catch(err => this._mensagem.texto = err);\r\n\r\n    }\r\n\r\n    apagaNegociacao() {\r\n\r\n        this._negociacaoService\r\n            .apagaNegociacao()\r\n            .then(mensagem => {\r\n                this._mensagem.texto = mensagem;\r\n                this._listaNegociacoes.esvaziaLista();\r\n            })\r\n            .catch(err => this._mensagem.texto = erro);\r\n    }\r\n\r\n\r\n    _criaNegociacao() {\r\n\r\n        return new Negociacao(\r\n            DateHelper.textoParaData(this._inputData.value),\r\n            parseInt(this._inputQuantidade.value),\r\n            parseFloat(this._inputValor.value)\r\n        );\r\n\r\n    }\r\n\r\n    //Usamos _ antes de um método para dizer que ele é reservado para própria classe e não deve ser chamado por alguem de fora do mesmo\r\n    _limpaFormulario() {\r\n\r\n        this._inputData.value = '';\r\n        this._inputQuantidade.value = 1;\r\n        this._inputValor.value = 0.0;\r\n\r\n        this._inputData.focus();\r\n    }\r\n\r\n    ordenaColuna(coluna) {\r\n        //quando colocamos um atributo em colchetes ao objeto, objeto[attr], significa que queremos acessar dinamicamente esse attr e não deixa-lo pre-definido\r\n        if(this._ordemAtual == coluna) {\r\n            // inverte a ordem da lista!\r\n        } else {\r\n            this._listaNegociacoes.ordenaColuna((a, b) => a[coluna] - b[coluna]);\r\n        }\r\n        this._ordemAtual = coluna;\r\n    }\r\n\r\n}\r\n\r\nlet negociacaoController = new NegociacaoController();\r\n\r\nexport function currentInstance() {\r\n\r\n    return negociacaoController;\r\n}"]}